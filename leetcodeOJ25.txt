两数相加：给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。
请你将两个数相加，并以相同形式返回一个表示和的链表。
你可以假设除了数字 0 之外，这两个数都不会以 0 开头。

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        if(l1==nullptr && l2==nullptr)
        {
            return nullptr;
        }
        ListNode* cur1=l1;
        ListNode* cur2=l2;
        ListNode* newhead=new ListNode;
        newhead->next=nullptr;
        ListNode* next=newhead;
        int carry =0;
        while(cur1 && cur2)
        {
           int tmp=cur1->val+cur2->val+carry;
           if(tmp>9)
           {
               tmp-=10;
               ListNode* lnext=new ListNode;
               lnext->val=tmp;
               lnext->next=nullptr;
               next->next=lnext;
               next=next->next;
               carry=1;
           }
           else
           {
               ListNode* lnext=new ListNode;
               lnext->val=tmp;
               lnext->next=nullptr;
               next->next=lnext;
               next=next->next;
               carry=0;
           }
           cur1=cur1->next;
           cur2=cur2->next;
        }
        while(cur1)
        {
            int tmp=cur1->val+carry;
            if(tmp>9)
            {
               tmp-=10;
               ListNode* lnext=new ListNode;
               lnext->val=tmp;
               lnext->next=nullptr;
               next->next=lnext;
               next=next->next;
               carry=1;
            }
            else
            {
                ListNode* lnext=new ListNode;
                lnext->val=tmp;
                lnext->next=nullptr;
                next->next=lnext;
                next=next->next;
                carry=0;
            }
            cur1=cur1->next;
        }
        while(cur2)
        {
            int tmp=cur2->val+carry;
            if(tmp>9)
            {
               tmp-=10;
               ListNode* lnext=new ListNode;
               lnext->val=tmp;
               lnext->next=nullptr;
               next->next=lnext;
               next=next->next;
               carry=1;
            }
            else
            {
                ListNode* lnext=new ListNode;
                lnext->val=tmp;
                lnext->next=nullptr;
                next->next=lnext;
                next=next->next;
                carry=0;
            }
            cur2=cur2->next;
        }
        if(carry==1)
        {
            ListNode* lnext=new ListNode;
            lnext->val=carry;
            lnext->next=nullptr;
            next->next=lnext;
            next=next->next;
        }
        ListNode* l=newhead->next;
        delete newhead;
        return l;
    }
};