#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include<assert.h>
struct ListNode
{
	int data;
	struct ListNode* next;
};
struct ListNode* BuyListNode(int x)
{
	struct ListNode* newnode = (struct ListNode*)malloc(sizeof(ListNode));
	if (newnode == NULL)
	{
		printf("开辟内存失败\n");
		exit(-1);
	}
	newnode->data = x;
	newnode->next = NULL;
	return newnode;
}
void ListNodePrint(struct ListNode* head)
{
	ListNode* cur = head;
	while (cur!=NULL)
	{
		printf("%d->", cur->data);
		cur = cur->next;
	}
	printf("NULL\n");
}
void ListNodePushBack(struct ListNode** head, int x)  //尾插
{
	struct ListNode* newnode = BuyListNode(x);
	//1.链表为空
	if (*head==NULL)
	{
		*head = newnode;
	}
	else
		//2.链表中只有一个结点
		//3.链表中有一个以上的结点
	{
		struct ListNode* tail = *head;
		while (tail->next!=NULL)  //找尾
		{
			tail=tail->next;
		}
		tail->next= newnode;
	}
}
void ListNodePushFront(struct ListNode** head, int x)
{
	struct ListNode* newnode = BuyListNode(x);
	if (*head == NULL)  //空链表
	{
		*head = newnode;
	}
	else   //非空链表
	{
		ListNode* cur = *head;
		*head = newnode;
		(*head)->next = cur;
	}
}
//题目：输入俩个链表，找出他们的第一个公共结点。
//struct ListNode* getIntersectionNode(struct ListNode* headA, struct ListNode* headB)
//{
//	struct ListNode* curA = headA;
//	struct ListNode* curB = headB;
//	int lA = 0;
//	int lB = 0;
//	while (curA)
//	{
//		curA = curA->next;
//		lA++;
//	}
//	while (curB)
//	{
//		curB = curB->next;
//		lB++;
//	}
//	int k = abs(lA - lB);
//	struct ListNode* slow = headA;
//	struct ListNode* fast = headB;
//	if (lA > lB)
//	{
//		struct ListNode* slow = headB;
//		struct ListNode* fast = headA;
//	}
//	while (k--)
//	{
//		fast = fast->next;
//	}
//
//	while (fast)
//	{
//		slow = slow->next;
//		fast = fast->next;
//		if (fast == slow)
//		{
//			return fast;
//		}
//	}
//	return NULL;
//}
//void ListNodeTest7()
//{
//	struct ListNode* l1 = NULL;
//	struct ListNode* l2 = NULL;
//	ListNodePushBack(&l1, 1);
//	ListNodePushBack(&l1, 1);
//	ListNodePushBack(&l1, 3);
//	ListNodePushBack(&l1, 5);
//	ListNodePushBack(&l1, 7);
//	ListNodePushBack(&l2, 0);
//	ListNodePushBack(&l2, 2);
//	ListNodePushBack(&l2, 4);
//	ListNodePushBack(&l2, 6);
//	ListNodePushBack(&l2, 8);
//	ListNodePushBack(&l2, 10);
//	ListNodePrint(l1);
//	ListNodePrint(l2);
//	struct ListNode* node = getIntersectionNode(l1,l2);
//	printf("%p\n", node);
//}
//int main()
//{
//	ListNodeTest7();
//	return 0;
//}
//题目：给定一个链表，判断链表中是否有环。
//int hasCycle(struct ListNode* head)
//{
//	struct ListNode* fast=head;
//	struct ListNode* slow = head;
//	while (fast && fast->next)
//	{
//		slow = slow->next;
//		fast = fast->next->next;
//		if (slow == fast)
//		{
//			return 1;
//		}
//	}
//	return 0;
//}
//void ListNodeTest8()
//{
//	struct ListNode* head = NULL;
//	ListNodePushBack(&head, 1);
//	ListNodePushBack(&head, 2);
//	ListNodePushBack(&head, 3);
//	ListNodePushBack(&head, 4);
//	ListNodePushBack(&head, 4);
//	ListNodePushBack(&head, 3);
//	ListNodePushBack(&head, 2);
//	ListNodePushBack(&head, 1);
//	ListNodePrint(head);
//	int ret = hasCycle(head);
//	if (ret == 1)
//		printf("Yes!\n");
//	else
//		printf("No!\n");
//}
//int main()
//{
//	ListNodeTest8();
//	return 0;
//
//}
//题目：给定一个链表，返回链表开始入环的第一个结点，如果无环返回NULL。
struct ListNode* detectCycle(struct ListNode* head)
{
	struct ListNode* fast = head;
	struct ListNode* slow = head;
	while (fast && fast->next)
	{
		fast = fast->next->next;
		slow = slow->next;
		if (fast == slow)
			break;
	}
	if (fast == NULL && fast->next == NULL)
		return NULL;
	while (head != fast)
	{
		head = head->next;
		fast = fast->next;
    }
	return fast;
}
void ListNodeTest9()
{
	/*struct ListNode* head = NULL;*/
	//ListNodePushBack(&head, 1);
	//ListNodePushBack(&head, 2);
	//ListNodePushBack(&head, 3);
	//ListNodePushBack(&head, 4);
	//ListNodePushBack(&head, 4);
	//ListNodePushBack(&head, 3);
	//ListNodePushBack(&head, 2);
	//ListNodePushBack(&head, 1);
	//ListNodePrint(head);
	struct ListNode* n3 = (struct ListNode*)malloc(sizeof(struct ListNode));
	n3->data = 3;
	struct ListNode* n1 = (struct ListNode*)malloc(sizeof(struct ListNode));
	n1->data = 1;
	n1->next = n3;
	struct ListNode* n2 = (struct ListNode*)malloc(sizeof(struct ListNode));
	n2->data = 2;
	n2->next = n1;

	n3->next = n2;
	struct ListNode* n4 = (struct ListNode*)malloc(sizeof(struct ListNode));
	n4->data = 4;
	n4->next = n3;
	struct ListNode* node=detectCycle(n4);
	printf("%d\n", node->data);

}
int main()
{
	ListNodeTest9();
	return 0;
}