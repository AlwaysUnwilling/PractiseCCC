#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include<assert.h>
struct ListNode
{
	int data;
	struct ListNode* next;
};
struct ListNode* BuyListNode(int x)
{
	struct ListNode* newnode = (struct ListNode*)malloc(sizeof(ListNode));
	if (newnode == NULL)
	{
		printf("开辟内存失败\n");
		exit(-1);
	}
	newnode->data = x;
	newnode->next = NULL;
	return newnode;
}
void ListNodePrint(struct ListNode* head)
{
	ListNode* cur = head;
	while (cur!=NULL)
	{
		printf("%d->", cur->data);
		cur = cur->next;
	}
	printf("NULL\n");
}
void ListNodePushBack(struct ListNode** head, int x)  //尾插
{
	struct ListNode* newnode = BuyListNode(x);
	//1.链表为空
	if (*head==NULL)
	{
		*head = newnode;
	}
	else
		//2.链表中只有一个结点
		//3.链表中有一个以上的结点
	{
		struct ListNode* tail = *head;
		while (tail->next!=NULL)  //找尾
		{
			tail=tail->next;
		}
		tail->next= newnode;
	}
}
void ListNodePushFront(struct ListNode** head, int x)
{
	struct ListNode* newnode = BuyListNode(x);
	if (*head == NULL)  //空链表
	{
		*head = newnode;
	}
	else   //非空链表
	{
		ListNode* cur = *head;
		*head = newnode;
		(*head)->next = cur;
	}
}
//题目：删除链表中等于给定值val的所有结点
void ListNodeDeleteTheSameVal(struct ListNode** head, int x)
{
	// 	   //方法1.0
	assert(*head);
	ListNode* nextnext = NULL;
	ListNode* pre = NULL;
	ListNode* cur = NULL;
	while ((*head)->data == x)  //如果头结点与X相等
	{
		pre=*head;
		*head = (*head)->next;
		free(pre);
	}
	cur = *head;    //头结点与X不相等
	while (cur->next != NULL)
	{
		if (cur->next->data == x)
		{
			pre = cur->next;
			nextnext = pre->next;
			cur->next = nextnext;
			free(pre);
		}
		else
			cur = cur->next;
	}
	//      // 方法2.0
	/*assert(*head);*/
	/*ListNode* pre = NULL;
	ListNode* cur = *head;
	while (cur != NULL)
	{
		if (cur->data == x)
		{
			if (cur == *head)
			{
				*head = cur->next;
				free(cur);
				cur = *head;
			}
			else
			{
				pre->next = cur->next;
				free(cur);
				cur = pre->next;
				
			}
		}
		else
		{
			pre = cur;
			cur = cur->next;
		}
	}*/

}
void ListNodeTest2()
{
	struct ListNode* head = NULL;
	ListNodePushBack(&head, 2);
	ListNodePushBack(&head, 1);
	ListNodePushBack(&head, 1);
	ListNodePushBack(&head, 1);
	ListNodePushBack(&head, 2);
	ListNodePushBack(&head, 3);
	ListNodePushBack(&head, 4);
	ListNodePushBack(&head, 2);
	ListNodePushBack(&head, 2);
	ListNodePrint(head);
    ListNodeDeleteTheSameVal(&head,2);
	ListNodePrint(head);
}
int  main()
{
	ListNodeTest2();
	return 0;
}

//题目：翻转一个单链表
//struct ListNode* reverseList(struct ListNode* head)
//{
//	if (head == NULL || head->next == NULL)
//		return head;
//		struct ListNode* n1 = NULL;
//		struct ListNode* n2 = head;
//		struct ListNode* n3 = head->next;
//		while (n2)
//		{
//			//翻转
//			n2->next = n1;
//			//迭代
//			n1 = n2;
//			n2 = n3;
//			if(n3)  //如果n3为空指针，则n3不再需要迭代
//			n3 = n3->next;
//		}
//		return n1;
//
//}
//struct ListNode* reverseList1(struct ListNode* head)
//{
//	/*if (head == NULL || head->next == NULL)
//		return head;*/
//	struct ListNode* cur = head;
//	struct ListNode* newhead = NULL;
//	struct ListNode* next = head->next;
//	while (cur!=NULL)
//	{
//		/*struct ListNode* next = cur->next;*/
//		/*cur->next=newhead;
//		newhead = cur;*/
//		ListNodePushFront(&newhead, cur->data);   //头插
//		cur = next;     //迭代
//		if(next!=NULL)
//		next = next->next;
//	}
//	return newhead;
//}
//void ListNodeTest1()
//{
//	struct ListNode* head=NULL;
//	ListNodePushBack(&head, 1);
//	ListNodePushBack(&head, 2);
//	ListNodePushBack(&head, 3);
//	ListNodePushBack(&head, 4);
//	ListNodePrint(head);
//	//struct ListNode* newhead = reverseList(head);
//	/*ListNodePrint(newhead);*/
//	//ListNodePushFront(&newhead, 5);
//	//ListNodePushFront(&newhead, 6);
//	//ListNodePushFront(&newhead, 7);
//	//ListNodePushFront(&newhead, 8);
//	//ListNodePushFront(&newhead, 9);
//	/*ListNodePrint(newhead);*/
//	struct ListNode* newhead1 = reverseList1(head);
//	ListNodePrint(newhead1);
//}
//int  main()
//{
//	ListNodeTest1();
//	return 0;
//}
// 方法2：头插法
// 
//题目：给定一个带头结点head的非空单链表，返回链表的中间结点。如果有俩个中间结点，则返回第二个中间结点
//int ReturnInterNode(struct ListNode* head)
//{
//	assert(head);
//	int count = 1;
//	ListNode* cur = head;
//	while (cur->next != NULL)
//	{
//		cur = cur->next;
//		count++;
//	}
//	if (count == 1)
//	{
//		return head->data;
//	}
//	else
//	{
//		int n = count / 2;
//		while (n)
//		{
//			head = head->next;
//			n--;
//		}
//		return head->data;
//	}
//}
//void ListNodeTest3()
//{
//    struct ListNode* head=NULL;
//	ListNodePushBack(&head, 1);
//	ListNodePushBack(&head, 2);
//	ListNodePushBack(&head, 3);
//	ListNodePushBack(&head, 4);
//	ListNodePushBack(&head, 4);
//	ListNodePushBack(&head, 4);
//	ListNodePrint(head);
//	int ret = ReturnInterNode(head);
//	printf("%d\n", ret);
//}
//int main()
//{
//	ListNodeTest3();
//	return 0;
//}