#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include<assert.h>
struct ListNode
{
	int data;
	struct ListNode* next;
};
struct ListNode* BuyListNode(int x)
{
	struct ListNode* newnode = (struct ListNode*)malloc(sizeof(ListNode));
	if (newnode == NULL)
	{
		printf("开辟内存失败\n");
		exit(-1);
	}
	newnode->data = x;
	newnode->next = NULL;
	return newnode;
}
void ListNodePrint(struct ListNode* head)
{
	ListNode* cur = head;
	while (cur!=NULL)
	{
		printf("%d->", cur->data);
		cur = cur->next;
	}
	printf("NULL\n");
}
void ListNodePushBack(struct ListNode** head, int x)  //尾插
{
	struct ListNode* newnode = BuyListNode(x);
	//1.链表为空
	if (*head==NULL)
	{
		*head = newnode;
	}
	else
		//2.链表中只有一个结点
		//3.链表中有一个以上的结点
	{
		struct ListNode* tail = *head;
		while (tail->next!=NULL)  //找尾
		{
			tail=tail->next;
		}
		tail->next= newnode;
	}
}
void ListNodePushFront(struct ListNode** head, int x)
{
	struct ListNode* newnode = BuyListNode(x);
	if (*head == NULL)  //空链表
	{
		*head = newnode;
	}
	else   //非空链表
	{
		ListNode* cur = *head;
		*head = newnode;
		(*head)->next = cur;
	}
}
题目：在一个排序链表中，存在重复的结点，请删除该链表中的重复结点。重复结点不保留，返回链表的头指针。
struct ListNode* ListNodeDeleteTheSameVal1(struct ListNode* head, int x)
{
	if (head == NULL)
		return NULL;
	struct ListNode* newhead = (struct ListNode*)malloc(sizeof(struct ListNode));
	struct ListNode* tail = newhead;
	struct ListNode* realhead = NULL;
	while (head)
	{
		if (head->data != x)
		{
			tail->next = head;
			tail = tail->next;
			head = head->next;
		}
		else
			head = head->next;
	}
	tail->next = NULL;
	realhead = newhead->next;
	return realhead;
}
void ListNodeTest11()
{
	struct ListNode* head = NULL;
	ListNodePushBack(&head, 10);
	ListNodePushBack(&head, 9);
	ListNodePushBack(&head, 8);
	ListNodePushBack(&head, 7);
	ListNodePushBack(&head, 6);
	ListNodePushBack(&head, 5);
	ListNodePushBack(&head, 10);
	ListNodePushBack(&head, 4);
	ListNodePushBack(&head, 3);
	ListNodePushBack(&head, 3);
	ListNodePushBack(&head, 2);
	ListNodePushBack(&head, 1);
	ListNodePrint(head);
	struct ListNode* newhead = ListNodeDeleteTheSameVal1(head, 3);
	ListNodePrint(newhead);
}
int main()
{
	ListNodeTest11();
	return 0;
}