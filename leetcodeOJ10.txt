//题目：杨辉三角
给定一个非负整数 numRows，生成杨辉三角的前 numRows 行。
class Solution {
public:
    vector<vector<int>> generate(int numRows) {
      vector<vector<int>> vv;
      vv.resize(numRows);
      size_t i=0;
      size_t j=0;
      for(i=0;i<numRows;++i)
      {
          vv[i].resize(i+1);
      }
      for(i=0;i<numRows;++i)
      {
          for(j=i;j<numRows-1;++j)
          {
              printf(" ");
          }
          printf("[");
          for(j=0;j<i;++j)
          {
              if(j==0)
              {
                  vv[i][j]=1;
              }
              else
              {
                  vv[i][j]=vv[i-1][j-1]+vv[i-1][j];
              }
              printf("%d,",vv[i][j]);
          }
          if(i==j)
          {
              vv[i][j]=1;
              printf("%d",vv[i][j]);
          }
          printf("],\n");
      }     
       return vv;
    }  
};

//题目： 删除有序数组中的重复项
给你一个有序数组 nums ，请你 原地 删除重复出现的元素，使每个元素 只出现一次 ，返回删除后数组的新长度。
不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。
说明:
为什么返回数值是整数，但输出的答案是数组呢?
请注意，输入数组是以「引用」方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。
//方法一：
class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
       if(nums.size()<2)  return nums.size();
       vector<int>::iterator start=nums.begin();
       vector<int>::iterator next=start+1;
       while(next<nums.end())
       {
           if(*start==*next)
           {
               next=nums.erase(next);
           }
           else
           {
                start=next;
                next=start+1;
           }
       }
       return nums.size();
    }
};
//方法二
class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
       if (nums.size() < 2) return nums.size();
	   int j = 0;
	   for (int i = 1; i < nums.size(); i++)
	   if (nums[j] != nums[i]) nums[++j] = nums[i];
	   return ++j;
    }
};

//题目:数组中出现次数超过一半的数字
描述
数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。例如输入一个长度为9的数组[1,2,3,2,2,2,5,4,2]。由于数字2在数组中出现了5次，超过数组长度的一半，因此输出2。你可以假设数组是非空的，并且给定的数组总是存在多数元素。1<=数组长度<=50000
class Solution {
public:
    int MoreThanHalfNum_Solution(vector<int> numbers) {
    sort(numbers.begin(),numbers.end());  
    return  numbers[numbers.size()/2];
}
};

//题目：连续子数组的最大和
输入一个整型数组，数组中的一个或连续多个整数组成一个子数组。求所有子数组的和的最大值。

要求时间复杂度为O(n)。
class Solution {
public:
    int maxSubArray(vector<int>& nums) {
      int maxs=nums[0];
      for(size_t i=1;i<nums.size();++i)
      {
          if(nums[i-1]>0)
          {
              nums[i]+=nums[i-1];
          }
           maxs=max(maxs,nums[i]);
      }
      return maxs;
    }
};