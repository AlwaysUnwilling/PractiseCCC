
题目： 重排链表
给定一个单链表 L：L0→L1→…→Ln-1→Ln ，
将其重新排列后变为： L0→Ln→L1→Ln-1→L2→Ln-2→…

你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */

typedef struct ListNode* STDataType;
typedef struct Stack
{
    STDataType* a;
    int top;
    int capacity;
}ST;
void StackInit(ST* st)
{
    st->a = (STDataType*)malloc(sizeof(STDataType)*4);
    if (st->a == NULL)
    {
        printf("malloc fail\n");
        exit(-1);
    }
    st->capacity = 4;
    st->top = 0;
}
void StackPush(ST* st, STDataType x)
{
    assert(st);
    if (st->top == st->capacity)
    {
        STDataType* tmp = (STDataType*)realloc(st->a, st->capacity * 2 * sizeof(STDataType));
        if (tmp == NULL)
        {
            printf("realloc fail\n");
            exit(-1);
        }
        st->a = tmp;
        st->capacity *= 2;
    }
    st->a[st->top] = x;
    st->top++;
}
void StackPop(ST* st)
{
    assert(st);
    assert(st->top > 0);
    st->top--;
}
STDataType StackTop(ST* st)
{
    assert(st);
    assert(st->top>0);
    return st->a[st->top-1];
}
bool StackEmpty(ST* st)
{
    assert(st);
    return st->top == 0;
}
int StackSize(ST* st)
{
    assert(st);
    return st->top;
}
void StackDestroy(ST* st)
{
    assert(st);
    free(st->a);
    st->a = NULL;
}


typedef struct ListNode* QDataType;
struct QueueNode
{
    QDataType data;
    struct QueueNode* next;
};
struct Queue
{
    struct QueueNode* head;
    struct QueueNode* tail;
};
void QueueInit(struct Queue* q)
{
    assert(q);
    q->head = q->tail = NULL;
}
void QueueDestroy(struct Queue* q)
{
    assert(q);
    struct QueueNode* cur = q->head;
    while (cur)
    {
        struct QueueNode* next = cur->next;
        free(cur);
        cur = next;
    }
    q->head = NULL;
}
void QueuePush(struct Queue* q, QDataType x)
{
    assert(q);
    struct QueueNode* node = (struct QueueNode*)malloc(sizeof(struct QueueNode));
    if (node == NULL)
    {
        printf("malloc fail\n");
        exit(-1);
    }
    else
    {
        node->data = x;
        node->next = NULL;
    }
    if (q->head == NULL)
    {
        q->tail = q->head=node;
    }
    else
    {
        q->tail->next = node;
        q->tail = q->tail->next;
    }
}
void QueuePop(struct Queue* q)
{
    assert(q);
    assert(q->head);
    struct QueueNode* next = q->head->next;
    free(q->head);
    q->head = next;
}
QDataType QueueFront(struct Queue* q)
{
    assert(q);
    assert(q->head);
    return q->head->data;
}
QDataType QueueBack(struct Queue* q)
{
    assert(q);
    assert(q->head);
    return q->tail->data;
}
int QueueSize(struct Queue* q)
{
    assert(q);
    int size = 0;
    struct QueueNode* cur = q->head;
    while (cur)
    {
        size++;
        cur = cur->next;
    }
    return size;
}
bool QueueEmpty(struct Queue* q)
{
    assert(q);
    return q->head == NULL;
}
void reorderList(struct ListNode* head){
    if(head==NULL)  return;
    if(head->next==NULL) return;
    if(head->next->next==NULL) return;
    struct Queue q;
    struct Stack st;
    QueueInit(&q);
    StackInit(&st);
    struct ListNode* newhead=(struct ListNode*)malloc(sizeof(struct ListNode));
    if(newhead==NULL)
    {
        exit(-1);
    }
    struct ListNode* tail=newhead;
    tail->next=NULL;
    struct ListNode* fast=head;
    struct ListNode* slow=head;
    while(fast)
    {
        QueuePush(&q,slow);
        slow=slow->next;
        if(fast->next==NULL)  break;
        fast=fast->next->next;
    }
    while(slow)
    {
      StackPush(&st,slow);
      slow=slow->next;
    }
    while(!QueueEmpty(&q))
    {
        tail->next=QueueFront(&q);
        QueuePop(&q);
        tail=tail->next;
        if(!StackEmpty(&st))
        {
            tail->next=StackTop(&st);
            StackPop(&st);
            tail=tail->next;
        }
    }
    tail->next=NULL;
    head=newhead->next;
    QueueDestroy(&q);
    StackDestroy(&st);
    free(newhead);
    newhead=NULL;
}