//题目：打印日期
//描述
//给出年分m和一年中的第n天，算出第n天是几月几号。
//输入描述：
//输入包括两个整数y(1 <= y <= 3000)，n(1 <= n <= 366)。
//输出描述：
//可能有多组测试数据，对于每组数据， 按 yyyy - mm - dd的格式将输入中对应的日期打印出来。
//#include<iostream>
//using namespace std;
//class Date
//{
//    friend ostream& operator<<(ostream& out, const Date& d);
//public:
//    Date(int year = 0, int month = 1, int day = 1)
//        :_year(year)
//        , _month(month)
//        , _day(day)
//    {}
//    int* GetMonthDays(int year, int n, int* size)
//    {
//        int* _a = (int*)malloc(sizeof(int) * 2);
//        if (_a == nullptr)
//            exit(-1);
//        int i = 1;
//        int MonthDays[13] = { 0,31,28,31,30,31,30,31,31,30,31,30,31 };
//        if (year % 400 == 0 || (year % 100 != 0 && year % 4 == 0))
//        {
//            MonthDays[2] = 29;
//        }
//        for (i = 1; i < 13; i++)
//        {
//            if (n > MonthDays[i])
//            {
//                n -= MonthDays[i];
//            }
//            else
//            {
//                _a[0] = i;
//                _a[1] = n;
//                *size = 2;
//                break;
//            }
//        }
//
//        return _a;
//    }
//    void Print()
//    {
//        printf("%04d-%02d-%02d\n", _year, _month, _day);
//    }
//private:
//    int _year;
//    int _month;
//    int _day;
//};
//
//ostream& operator<<(ostream& out, const Date& d)
//{
//    out << d._year << "-" << d._month << "-" << d._day << endl;
//    return out;
//}
//int main()
//{
//    Date d;
//    int n = 0, year = 0;
//    scanf("%d%d", &year, &n);
//    int size = 0;
//    int* _b = d.GetMonthDays(year, n, &size);
//    d = { year,_b[0],_b[1] };
//    //cout<<d<<endl;
//    d.Print();
//    free(_b);
//    _b = nullptr;
//    return 0;
//}

//题目：日期累加
//设计一个程序能计算一个日期加上若干天后是什么日期。
//输入描述：
//输入第一行表示样例个数m，接下来m行每行四个整数分别表示年月日和累加的天数。
//输出描述：
//输出m行，每行按yyyy - mm - dd的个数输出。
//#include<iostream>
//using namespace std;
//class Date
//{
//    friend istream& operator>>(istream& in, Date& d);
//    friend ostream& operator<<(ostream& out, Date& d);
//public:
//    Date(int year = 0, int month = 1, int day = 1)
//        :_year(year)
//        , _month(month)
//        , _day(day)
//    {}
//    int GetMonthDays(int year, int month)
//    {
//        int MonthDays[13] = { 0,31,28,31,30,31,30,31,31,30,31,30,31 };
//        if (month == 2 && (year % 400 == 0 || (year % 100 != 0 && year % 4 == 0)))
//            return 29;
//        else
//            return MonthDays[month];
//    }
//    Date& operator+=(int day)
//    {
//        _day += day;
//        while (_day > GetMonthDays(_year, _month))
//        {
//            _month++;
//            if (_month > 12)
//            {
//                _year++;
//                _month = 1;
//            }
//            _day -= GetMonthDays(_year, _month);
//        }
//        return *this;
//    }
//    Date operator+(int day)
//    {
//        Date tmp = *this;
//        tmp += day;
//        return tmp;
//    }
//    Date& operator++()
//    {
//        *this += 1;
//        return *this;
//    }
//    bool operator>(const Date& d2)
//    {
//        if (_year > d2._year) return true;
//        else if (_year == d2._year && _month > d2._month)  return true;
//        else if (_year == d2._year && _month == d2._month && _day > d2._day)  return true;
//        return false;
//    }
//    bool operator!=(const Date& d2)
//    {
//        if (_year == d2._year
//            && _month == d2._month
//            && _day == d2._day)
//            return false;
//        else
//            return true;
//    }
//    int operator-(const Date& d2)
//    {
//        int n = 1;
//        Date min = *this;
//        Date max = d2;
//        if (*this > d2)
//        {
//            min = d2;
//            max = *this;
//         
//        }
//        while (min != max)
//        {
//            ++min;
//            n++;
//        }
//        return n;
//    }
//private:
//    int _year;
//    int _month;
//    int _day;
//};
//istream& operator>>(istream& in, Date& d)
//{
//    in >> d._year >> d._month >> d._day;
//    return in;
//}
//ostream& operator<<(ostream& out, Date& d)
//{
//    out << d._year << "-" << d._month << "-" << d._day << endl;
//    return out;
//}
//int main()
//{
//    Date d;
//    Date d2;
//    int n = 0;
//    cin >> d;
//    scanf("%d", &n);
//    d2 = d + n;
//    cout << d2 << endl;
//    return 0;
//}

//题目：链表求和
//给定两个用链表表示的整数，每个节点包含一个数位。
//
//这些数是反向存放的，也就是个位排在链表首部。
//
//编写函数对这两个整数求和，并用链表形式返回结果。
 /*Definition for singly-linked list.*/
#include<assert.h>
 struct ListNode {
     int val;
     struct ListNode *next;
 };
 

long long GetPower(int n, int a)
{
    if (n == 0)  return 1;
    long long ret = 1;
    while (n >= 1)
    {
        ret *= a;
        n--;
    }
    return ret;
}
struct ListNode* BuyListNode(int num)
{
    struct ListNode* buynode = (struct ListNode*)malloc(sizeof(struct ListNode));
    if (buynode == NULL)  exit(-1);
    buynode->val = num;
    buynode->next = NULL;
    return buynode;
}
struct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2) {
    assert(l1 && l2);
    struct ListNode* cur1 = l1;
    struct ListNode* cur2 = l2;
    long long num1 = 0, num2 = 0;
    int n = 0;
    while (cur1)
    {
        num1 += (cur1->val) * GetPower(n, 10);
        cur1 = cur1->next;
        n++;
    }
    int m = 0;
    while (cur2)
    {
        num2 += (cur2->val) * GetPower(m, 10);
        cur2 = cur2->next;
        m++;
    }
    long long ret = num1 + num2;
    struct ListNode* newNode = (struct ListNode*)malloc(sizeof(struct ListNode));
    if (newNode == NULL)  exit(-1);
    struct ListNode* tail = newNode;
    tail->next = NULL;
    if (ret / 10 == 0)
    {
        tail->next = BuyListNode(ret);
        tail = tail->next;
        struct ListNode* sum = newNode->next;
        free(newNode);
        newNode = NULL;
        return sum;
    }
    while (ret / 10)
    {
        int tmp = ret % 10;
        tail->next = BuyListNode(tmp);
        tail = tail->next;
        ret /= 10;
    }
    tail->next = BuyListNode(ret);
    tail = tail->next;
    struct ListNode* sum = newNode->next;
    free(newNode);
    newNode = NULL;
    return sum;
}