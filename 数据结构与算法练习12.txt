#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include<assert.h>
struct ListNode
{
	int data;
	struct ListNode* next;
};
struct ListNode* BuyListNode(int x)
{
	struct ListNode* newnode = (struct ListNode*)malloc(sizeof(ListNode));
	if (newnode == NULL)
	{
		printf("开辟内存失败\n");
		exit(-1);
	}
	newnode->data = x;
	newnode->next = NULL;
	return newnode;
}
void ListNodePrint(struct ListNode* head)
{
	ListNode* cur = head;
	while (cur!=NULL)
	{
		printf("%d->", cur->data);
		cur = cur->next;
	}
	printf("NULL\n");
}
void ListNodePushBack(struct ListNode** head, int x)  //尾插
{
	struct ListNode* newnode = BuyListNode(x);
	//1.链表为空
	if (*head==NULL)
	{
		*head = newnode;
	}
	else
		//2.链表中只有一个结点
		//3.链表中有一个以上的结点
	{
		struct ListNode* tail = *head;
		while (tail->next!=NULL)  //找尾
		{
			tail=tail->next;
		}
		tail->next= newnode;
	}
}
void ListNodePushFront(struct ListNode** head, int x)
{
	struct ListNode* newnode = BuyListNode(x);
	if (*head == NULL)  //空链表
	{
		*head = newnode;
	}
	else   //非空链表
	{
		ListNode* cur = *head;
		*head = newnode;
		(*head)->next = cur;
	}
}
//题目：对链表进行插入排序。
typedef ListNode Node;
struct ListNode* listNodeInsertSort(struct ListNode* head)
{
	if (head == NULL)
		return NULL;
	Node* cur = head->next;
	head->next = NULL;
	Node* next = NULL;
	Node* pre = NULL;
	while (cur)
	{
		//1.0小于head->data的直接头插。
		if (cur->data < head->data)
		{
			Node* next = cur->next;
			cur->next = head;
			head = cur;
			cur = next;
		}
		else   //2.0大于等于head->data的 向head后比较找合适位置插入
		{
			pre = head;
			Node* prenext = pre->next;
			while (prenext)
			{
				if (prenext->data >= cur->data)    //找到插入位置了
				{
					pre->next = cur;
					next = cur->next;
					cur->next = prenext;
					cur = next;
					break;
				}
				pre = prenext;
				prenext = prenext->next;
			}
			if (prenext == NULL)  //找完都没找到就直接尾插。
			{
				pre->next = cur;
				next = cur->next;
				cur->next = NULL;
				cur = next;
			}
		}
		
	}
	return head;
}
void ListNodeTest10()
{
	struct ListNode* head = NULL;
	//ListNodePushBack(&head, 10);
	//ListNodePushBack(&head, 9);
	//ListNodePushBack(&head, 8);
	//ListNodePushBack(&head, 7);
	//ListNodePushBack(&head, 6);
	//ListNodePushBack(&head, 5);
	//ListNodePushBack(&head, 10);
	//ListNodePushBack(&head, 4);
	//ListNodePushBack(&head, 3);
	//ListNodePushBack(&head, 3);
	//ListNodePushBack(&head, 2);
	//ListNodePushBack(&head, 1);
	ListNodePushBack(&head, -1);
	ListNodePushBack(&head, 5);
	ListNodePushBack(&head, 3);
	ListNodePushBack(&head, 4);
	ListNodePushBack(&head, 0);
	ListNodePrint(head);
	struct ListNode* newhead=listNodeInsertSort(head);
	ListNodePrint(newhead);
}
int main()
{
	ListNodeTest10();
	return 0;
}