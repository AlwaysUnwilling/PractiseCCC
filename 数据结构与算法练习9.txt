#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include<assert.h>
struct ListNode
{
	int data;
	struct ListNode* next;
};
struct ListNode* BuyListNode(int x)
{
	struct ListNode* newnode = (struct ListNode*)malloc(sizeof(ListNode));
	if (newnode == NULL)
	{
		printf("开辟内存失败\n");
		exit(-1);
	}
	newnode->data = x;
	newnode->next = NULL;
	return newnode;
}
void ListNodePrint(struct ListNode* head)
{
	ListNode* cur = head;
	while (cur!=NULL)
	{
		printf("%d->", cur->data);
		cur = cur->next;
	}
	printf("NULL\n");
}
void ListNodePushBack(struct ListNode** head, int x)  //尾插
{
	struct ListNode* newnode = BuyListNode(x);
	//1.链表为空
	if (*head==NULL)
	{
		*head = newnode;
	}
	else
		//2.链表中只有一个结点
		//3.链表中有一个以上的结点
	{
		struct ListNode* tail = *head;
		while (tail->next!=NULL)  //找尾
		{
			tail=tail->next;
		}
		tail->next= newnode;
	}
}
void ListNodePushFront(struct ListNode** head, int x)
{
	struct ListNode* newnode = BuyListNode(x);
	if (*head == NULL)  //空链表
	{
		*head = newnode;
	}
	else   //非空链表
	{
		ListNode* cur = *head;
		*head = newnode;
		(*head)->next = cur;
	}
}
//题目：编写代码，以给定值x为基准将链表分割成俩部分，所有小于x的结点排在大于等于x的结点之前。
//struct ListNode* ListNodeBreakUp(struct ListNode* head, int x)
//{
//	assert(head);
//	struct ListNode* newhead = NULL;
//	struct ListNode* h1 = (struct ListNode*)malloc(sizeof(ListNode));
//	struct ListNode* t1 = h1;
//	struct ListNode* h2 = (struct ListNode*)malloc(sizeof(ListNode));
//	struct ListNode* t2 = h2;
//	while (head)
//	{
//		if (head->data < x)
//		{
//			t1->next = head;
//			t1 = t1->next;
//			head = head->next;
//		}
//		else
//		{
//			t2->next = head;
//			t2 = t2->next;
//			head = head->next;
//		}
//	}
//	t2->next = NULL;
//	t1->next = h2->next;
//	newhead = h1->next;
//	free(h1);
//	free(h2);
//	return newhead;
//}
//void ListNodeTest5()
//{
//	struct ListNode* head = NULL;
//	ListNodePushBack(&head, 1);
//	ListNodePushBack(&head, 8);
//	ListNodePushBack(&head, 9);
//	ListNodePushBack(&head, 2);
//	ListNodePushBack(&head, 10);
//	ListNodePushBack(&head, 3);
//	ListNodePushBack(&head, 7);
//	ListNodePushBack(&head, 0);
//	ListNodePushBack(&head, 4);
//	ListNodePushBack(&head, 12);
//	ListNodePushBack(&head, 7);
//	ListNodePushBack(&head, 6);
//	ListNodePrint(head);
//	struct ListNode* newhead = ListNodeBreakUp(head, 7);
//	ListNodePrint(newhead);
//}
//int main()
//{
//	ListNodeTest5();
//	return 0;
//}
//题目：链表的回文结构。
struct ListNode* ListNodeReverse(struct ListNode* head)
{
	if (head == NULL || head->next == NULL)
		return head;
	struct ListNode* n1 = NULL;
	struct ListNode* n2 = head;
	struct ListNode* n3 = head->next;
	while (n2)
	{
		n2->next = n1;
		n1 = n2;
		n2 = n3;
		if(n3)
		n3 = n3->next;
	}
	return n1;
}
int ListNodeJudPalDrome(struct ListNode* head)
{
	if (head == NULL)
		return 0;
	struct ListNode* slow = head;
	struct ListNode* fast = head;
	while (fast && fast->next)
	{
		slow = slow->next;
		fast = fast->next->next;
	}
	struct ListNode* nhead=ListNodeReverse(slow);
	while (head != slow)
	{
		if (head->data == nhead->data)
		{
			head = head->next;
			nhead = nhead->next;
		}
		else
			return 0;
	}
	return 1;
}
void ListNodeTest6()
{
	struct ListNode* head = NULL;
	ListNodePushBack(&head, 1);
	ListNodePushBack(&head, 2);
	ListNodePushBack(&head, 3);
	ListNodePushBack(&head, 4);
	ListNodePushBack(&head, 4);
	ListNodePushBack(&head, 3);
	ListNodePushBack(&head, 2);
	ListNodePushBack(&head, 1);
	ListNodePrint(head);
	int ret=ListNodeJudPalDrome(head);
	if (ret == 1)
		printf("该链表是回文结构！\n");
	else
		printf("该链表不是回文结构！\n");
}
int main()
{
	ListNodeTest6();
	return 0;
}