#define _CRT_SECURE_NO_WARNINGS 1
#include<string.h>
#include<stdio.h>
#include<stdlib.h>
// 题目：旋转数组：给定一个数组，将数组中的元素向右移动K个位置，其中k为非负整数。 进阶：1、尽可能想出多种方法；2、使用空间复杂度的O(1)的原地算法解决这个问题。
//void move_k(int* nums, int k,int numsSize)
//{
//	while (k)
//	{
//		int tmp = nums[numsSize - 1];
//		for (int i = 0; i < numsSize-1; i++)
//		{
//			nums[numsSize - 1 - i] = nums[numsSize - 2 - i];
//		}
//		nums[0] = tmp;
//		k--;
//	}
//	for (int i = 0; i < numsSize; i++)
//	{
//		printf("%d ", nums[i]);
//	}
//}
//int main()
//{
//	int nums[10] = { 2,4,6,8,0,1,3,9,5,7 };
//	move_k(nums, 4,10);
//	return 0;
//}
void reverse(int* nums, int left, int right)
{
	while (left < right)
	{
		int tmp = nums[left];
		nums[left] = nums[right];
		nums[right] = tmp;
		++left;
		--right;
	}
}
void move_k(int* nums, int k, int numsSize)
{
	k %= numsSize;   //k有可能比数组大小还大
	reverse(nums, 0, numsSize - k - 1);
	reverse(nums,numsSize-k,numsSize-1);
	reverse(nums,0,numsSize-1);
	for (int i = 0; i < numsSize; i++)
	{
		printf("%d ", nums[i]);
	}
}
int main()
{
	int nums[10] = { 2,4,6,8,0,1,3,9,5,7 };
	move_k(nums, 4, 10);
	return 0;
}
// 题目：数组形式的整数加法：对于非负整数X而言，X的数组形式是每位数字按从左到右的顺序形成的数组。
//       例如：如果X=1231，那么其数组形式为{1,2,3,1}。给定非负整数X的数组形式A，返回整数X+K的数组形式

//int* arr_X_K(int X, int K, int m, int n)
//{
//	int i = 0;
//	int* tmp = (int*)malloc(sizeof(int) * (m + n));
//	for (i = m-1; i >=0 ; i--)
//	{
//		tmp[i] = X % 10;
//		X /= 10;
//	}
//	for (i = m+n-1; i >=m ; i--)
//	{
//		tmp[i] = K % 10;
//		K /= 10;
//	}
//	return tmp;
//}
//int main()
//{
//	int X = 0;
//	int K = 0;
//	int i = 0;
//	int tmp = 0;
//	int m = 1;
//	int n = 1;
//	printf("请输入X的值：");
//	scanf("%d", &X);
//	printf("请输入K的值：");
//	scanf("%d", &K);
//	tmp = X;
//	while (tmp/10)
//	{
//		tmp /= 10;
//		m++;
//	}
//	tmp = K;
//	while (tmp / 10)
//	{
//		tmp /= 10;
//		n++;
//	}
//	int* A_K = arr_X_K(X, K,m,n);
//	for (i = 0; i <m+n; i++)
//	{
//		printf("%d ", A_K[i]);
//	}
//	free(A_K);
//	A_K = NULL;
//	return 0;
//}