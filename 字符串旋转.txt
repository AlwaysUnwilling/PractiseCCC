题目：实现一个函数，可以实现左旋转字符串中的k个字符。例如：ABCD 左旋转一个字符得到BCDA；ABCD左旋转俩个字符可以得到CDAB

#include<assert.h>
void Turn(char* arr, int k)
{
	assert(arr != NULL);
	int i = 0;
	
	for (i = 0; i < k; i++)
	{
		char tmp = *arr;
		char* p = arr;
 		while (*p)
		{
			*p = *(p+1);
			p++;
		}
		*(p- 1) = tmp;
	}
}

2.0 三部旋转法
  abcdef     左旋ab
 ba   fedc   分别逆序俩边的字符；
 bafedc  整体逆序此字符串即为： cdefab
void reverse(char* left, char* right)
{
	assert(left && right);
		while (left<right)
		{
			char tmp = *left;
			*left = *right;
			*right=tmp;
			left++;
			right--;
		}
}
void Turn(char* arr, int k)
{
	int len = strlen(arr);
	assert(k <= len);
	reverse(arr, arr + k - 1);
	reverse(arr+k,arr+len-1);
	reverse(arr,arr+len-1);
}
int main()
{
	char arr[] = "ABCDEFGHI";
	int k = 0;
	//printf("请输入要操作的字符串：");
	//scanf("%s", arr);
	printf("请输入要左旋转字符的个数：");
	scanf("%d", &k);
	Turn(arr, k);
	printf("%s", arr);
	return 0;
}
int is_arr1_Turn(char* s1, char* s2)
{
	int len = strlen(s1);
	int i = 0;
	for (i = 0; i < len; i++)
	{
		Turn(s1, 1);   //每次旋转完，s1已经发生改变，固只能一个个字符去旋转，而不能传参i
		int ret=strcmp(s1, s2);
		if (ret == 0)
			return 1;
	}
		return 0;
}
int main()   //判断一个字符串arr2 是不是可以通过 字符串arr1 旋转得来的 方法1
{
	char arr1[] = "abcdef";
	char arr2[] = "defabc";
	int ret=is_arr1_Turn(arr1, arr2);
	if (ret == 1)
		printf("Yes\n");
	else
		printf("No\n");
	return 0;
}
  方法2：思路：给字符串arr1[]="abcdef"末尾追加一个字符串“abcdef”即为：“abcdefabcdef”；此时新字符串包含了所有arr1可以旋转的可能性。然后判断arr2是否为arr1的一个子字符串，如果是即为可以通过arr1旋转得来，否则不可以。


int is_Can_Turn(char* str1, char* str2) 
{
	//1.str1后面追加一个str1字符串；strcat
	int len1 = strlen(str1);
	int len2 = strlen(str2);
	if (len1 != len2)
		return 0;
	strncat(str1, str1, len1);

	//2.判断str2是否为追加后的str1的子字符串；找子字符串的函数是strstr（）；
	char* ret=strstr(str1, str2);
	if (ret == NULL)
		return 1;
	else
		return 0;
}
int main()
{
	char arr1[30] = "abcdef";
	char arr2[] = "cdefba";
	int ret = is_Can_Turn(arr1,arr2);
	if (ret == 1)
		printf("Yes\n");
	else
		printf("No\n");
	return 0;
}