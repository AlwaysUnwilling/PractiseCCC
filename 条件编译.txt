//  ****************************** 条件编译 *****************************
#include<stdio.h>
#include<string.h>
#include<errno.h>
//int main()
//{
//	int arr[10] = { 1,2,3,4,5,6,7,8,9,0 };
//	int i = 0;
//	for (i = 0; i < 10; i++)
//	{
//		arr[i] = i;
//#ifdef DEBUG
//		printf("%d ", arr[i]);
//#endif
//	}
//	return 0;
//}

//int main()
//{
//#if defined(DEBUG)
//	printf("hehe\n");
//#endif
////#ifdef DEBUG                  //  俩种写法效果一样
////	printf("hehe\n");
////#endif
//#if !defined(DEBUG)
//	printf("hehe\n");
//#endif
//	return 0;
//}

#include"Add.h"
#include<stdio.h>
#include<stddef.h>
//int main()
//{
//	int a = 10;
//	int b = 20;
//	int ret=Add(a, b);
//	printf("%d\n", ret);
//	return 0;
//}

//  题目：请编写宏，计算结构体中某变量相对于首地址的偏移量，并给出说明  （offsetof（structName，memberName）  ；  #include<stddef.h>）

//#define OFFSETOF(struct_name,member_name)  (int)&(((struct_name*)0)->member_name)
#define OFFSETOF(struct_name,member_name)  (int)&(((struct_name*)5)->member_name)-5
//struct S
//{
//	char c1;
//	int a;
//	char c2;
//};
////int main()
////{
////	printf("%d\n", offsetof(struct S, c1));
////	printf("%d\n", offsetof(struct S, a));
////	printf("%d\n", offsetof(struct S, c2));
////	return 0;
////}
//int main()
//{
//	
//	printf("%d\n", OFFSETOF(struct S, c1));
//	printf("%d\n", OFFSETOF(struct S, a));
//	printf("%d\n", OFFSETOF(struct S, c2));
//	return 0;
//}

// 题目：找单身狗。一个数组中只有俩个数字只出现了一次，其他所有数字都出现了俩次。编写一个函数找出这俩个只出现一次的数字。

//int main()     //找一个单身狗
//{
//	int tmp = 0;
//	int arr[5] = { 1,1,2,2,3 };
//	int i = 0;
//	tmp = arr[0];
//	for (i = 0; i < 4; i++)
//	{
//		tmp ^= arr[i + 1];
//	}
//	printf("%d\n", tmp);
//	return 0;
//}

int Find_Single_Num(int arr[], int n)  //  找俩个单身狗
{
	int i = 0;
	int tmp = arr[0];
	for (i = 0; i < n - 1; i++)
	{
		tmp ^= arr[i + 1];
	}
	return tmp;
}
int main()
{
	int arr[10] = { 1,1,2,2,3,3,7,5,5,8 };
	int arr1[10] = { 0 };
	int arr0[10] = { 0 };
	int i = 0;
	int j = 0;
	int k = 0;
	int tmp = arr[0];
	for (i = 0; i < 9; i++)
	{
		tmp ^= arr[i];
	}
	for (i = 0; i < 10; i++)
	{
		if ((tmp ^ arr[i] ^ 1 )== 0)
		{
			arr1[j] = arr[i];
			j++;
		}
		else
		{
			arr0[k] = arr[i];
			k++;
		}
	}
	printf("只出现一次的数字分别是：%d %d\n", Find_Single_Num(arr0, k + 1),
		                              Find_Single_Num(arr1, j + 1));
	return 0;
}