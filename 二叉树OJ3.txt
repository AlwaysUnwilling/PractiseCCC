#define _CRT_SECURE_NO_WARNINGS 1

#include<string.h>
#include<stdio.h>
#include<stdlib.h>
#include<assert.h>
#include<stdbool.h>
typedef struct BinaryTreeNode* QDataType;
struct QueueNode
{
	QDataType data;
	struct QueueNode* next;
};
struct Queue
{
	QueueNode* head;
	QueueNode* tail;
};
void QueueInit(Queue* q)
{
	assert(q);
	q->head = q->tail = NULL;
}
void QueueDestroy(Queue* q)
{
	assert(q);
	QueueNode* cur = q->head;
	while (cur)
	{
		QueueNode* next = cur->next;
		free(cur);
		cur = next;
	}
	q->head = NULL;
}
void QueuePush(Queue* q, QDataType x)
{
	assert(q);
	QueueNode* node = (QueueNode*)malloc(sizeof(QueueNode));
	if (node == NULL)
	{
		printf("malloc fail\n");
		exit(-1);
	}
	else
	{
		node->data = x;
		node->next = NULL;
	}
	if (q->head == NULL)
	{
		q->tail = q->head = node;
	}
	else
	{
		q->tail->next = node;
		q->tail = q->tail->next;
	}
}
void QueuePop(Queue* q)
{
	assert(q);
	assert(q->head);
	QueueNode* next = q->head->next;
	free(q->head);
	q->head = next;
}
QDataType QueueFront(Queue* q)
{
	assert(q);
	assert(q->head);
	return q->head->data;
}
QDataType QueueBack(Queue* q)
{
	assert(q);
	assert(q->head);
	return q->tail->data;
}
int QueueSize(Queue* q)
{
	assert(q);
	int size = 0;
	QueueNode* cur = q->head;
	while (cur)
	{
		size++;
		cur = cur->next;
	}
	return size;
}
bool QueueEmpty(Queue* q)
{
	assert(q);
	return q->head == NULL;
}
//二叉树
typedef char BTDataType;
typedef struct BinaryTreeNode
{
	struct BinaryTreeNode* left;
	struct BinaryTreeNode* right;
	BTDataType data;
}BTNode;
//题目：求二叉树第K层结点个数

int BinaryTreeLevelKSize(BTNode* root, int k)
{
	if (root == NULL)
		return 0;
	if (k == 1)
		return 1;
	return BinaryTreeLevelKSize(root->left, k - 1) +
		   BinaryTreeLevelKSize(root->right, k - 1);
}

//题目：二叉树查找值为X的结点
BTNode* BinaryTreeFind(BTNode* root, BTDataType x)
{
	if (root == NULL)
		return NULL;
	if (root->data == x)
		return root;
	BTNode* node=BinaryTreeFind(root->left, x);
	if (node)
		return node;
    node=BinaryTreeFind(root->right, x);
	if (node)
		return node;
	return NULL;
}

//题目：判断一颗二叉树是不是完全二叉树


int BinaryTreeComplete(BTNode* root)
{
	if (root == NULL)
		return 1;
	//层序遍历 出队列时如果遇到NULL 跳出循环，判断队列里剩余元素是否全为NULL 否则则为假
	//完全二叉树层序遍历完root和NULL是分别连续的，而非完全二叉树 NULL中会夹杂root
	Queue q;
	QueueInit(&q);
	QueuePush(&q, root);
	while (!QueueEmpty(&q))
	{
		BTNode* front = QueueFront(&q);
		QueuePop(&q);
		if (front == NULL)
			break;

		QueuePush(&q, front->left);
		QueuePush(&q, front->right);
	}
	while (!QueueEmpty(&q))
	{
		BTNode* front = QueueFront(&q);
		QueuePop(&q);
		if (front != NULL)
		{
			QueueDestroy(&q);
			return 0;
		}
			
	}
	QueueDestroy(&q);
	return 1;
}
//题目：输入一棵二叉树的根节点，判断该树是不是平衡二叉树。如果某二叉树中任意节点的左右子树的深度相差不超过1，那么它就是一棵平衡二叉树。
bool _isBalanced(BTNode* root, int* pdepth)//后续遍历判断，从叶子结点开始判断
{
	if (root == NULL)
	{
		*pdepth = 0;
		return true;
	}

	int leftdepth = 0;
	if (_isBalanced(root->left, &leftdepth) == false)//左边不满足
		return false;

	int rightdepth = 0;
	if (_isBalanced(root->right, &rightdepth) == false)//右边不满足
			return false;

	if (abs(leftdepth - rightdepth) > 1) //当前树不满足
		return false;

	*pdepth= leftdepth > rightdepth ? leftdepth + 1 : rightdepth + 1; //满足时返回最大高度
	return true;
}
bool isBalanced(BTNode* root)
{
	int depth = 0;
	return _isBalanced(root, &depth);
}
int main()
{
	BTNode* A = (BTNode*)malloc(sizeof(BTNode));
	A->data = 'A';
	A->left = NULL;
	A->right = NULL;

	BTNode* B = (BTNode*)malloc(sizeof(BTNode));
	B->data = 'B';
	B->left = NULL;
	B->right = NULL;

	BTNode* C = (BTNode*)malloc(sizeof(BTNode));
	C->data = 'C';
	C->left = NULL;
	C->right = NULL;

	BTNode* D = (BTNode*)malloc(sizeof(BTNode));
	D->data = 'D';
	D->left = NULL;
	D->right = NULL;

	BTNode* E = (BTNode*)malloc(sizeof(BTNode));
	E->data = 'E';
	E->left = NULL;
	E->right = NULL;

	A->left = B;
	A->right = C;
	B->left = D;
	B->right = E;

	printf("BinaryTreeLevelKSize(A, 3):%d\n", BinaryTreeLevelKSize(A, 3));
	printf("BinaryTreeFind(A,B)->data:%c\n", BinaryTreeFind(A, 'B')->data);
	printf("BinaryTreeComplete(A):%d\n", BinaryTreeComplete(A));
		if (isBalanced(A))
	{
		printf("yes\n");
	}
	else
		printf("no\n");
	return 0;
}