 #define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<string.h>
#include<assert.h>
************************************模仿实现 memmove

void* my_memove(void* dest, const void* src, int num)
{
	assert(dest && src);
	char* p1 = (char*)dest;
	char* p2 = (char*)src;
	if (dest < src)
	{
		while (num)
		{
			*p1 = *p2;
			p1++;
			p2++;
			num--;
		}
	}
	else
	{
		while (--num)
		{
			*(p1 + num) = *(p2 + num);
			
		}
		*p1 = *p2;
	}
	return dest;
}
int main()
{
	int i = 0;
	int arr[] = { 1,2,3,4,5,6,7,8,9,10 };
	my_memove(arr , arr+2, 20);   //  把前5个元素拷贝到该数组的第三个元素开始的5个元素的位置     **************重叠拷贝
	for (i = 0; i < 10; i++)
	{
		printf("%d ", arr[i]);
	}
	return 0;
}

 ***************************************模拟实现 memcmp 

int my_memcmp(const void* str, const void* ptr, int num)
{
	assert(str && ptr);
	//while ((*(char*)str == *(char*)ptr) && --num)
	//{
	//	++(char*)str;
	//	++(char*)ptr;
	//}
	//return *(char*)str - *(char*)ptr;
	char* p1 = (char*)str;
	char* p2 = (char*)ptr;
	while (*p1 == *p2 && --num)
	{
		p1++;
		p2++;
		
	}
	return *p1 - *p2;
}
int main()
{
	int arr1[] = { 1,2,3,4,5 };
    int arr2[] = { 1,2,5,2,8 };
	int ret = my_memcmp(arr1, arr2, 8);
	if (ret > 0)
	{
		printf("arr1>arr2");
	}
	else if (ret == 0)
	{
		printf("arr1=arr2");
	}
	else
	{
		printf("arr1<arr2");
	}
	return 0;
}

 *********************************** memset  内存设置

int main()
{
	int arr[10] = {0};
	 memset(arr, 1, 40);  void *memset( void *dest, int c, size_t count ); memset函数中count的单位是字节！
	memset(arr, '*', 40);

	return 0;
}