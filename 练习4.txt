#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include<windows.h>
//###################################################￥￥模拟实现 strlen（） ￥￥########################################################################
//
//int my_strlen(const char* arr)
//{
//	assert(arr != NULL);
//	int n = 0;
//	while (*arr++ != '\0')
//	{
//		n++;
//	}
//	return n;
//}
//int main()
//{
//	char arr[] = "abcdefg";
//	printf("%d\n", my_strlen(arr));
//	return 0;
//}

//***************************************************判断当前编译器内存字节序使什么（大小端？）*********************************************
//int check_sys()
//{
//	int a = 1;
//	char* p = (char*)&a;//(char*)&a- 把a的地址强制转换为char*；指针类型决定了指针解引用（*p）可以向后访问的字节数（char*类型可以方位1和字节；int*可以访问4个字节）
//	////if (*p == 1)
//	//{
//	//	return 1;
//	//}
//	//else
//	//	return 0;
//	return *p;
//}
//int main()
//{
//	int ret=check_sys();
//	if (ret == 1)
//	{
//		printf("小端\n");
//	}
//	else
//		printf("大端\n");
//	return 0;
//}

//
//int main()
//{
//	int arr1[] = { 1,2,3,4,5,6 };
//	int arr2[] = { 2,3,4,5,6,7 };
//	int arr3[] = { 3,4,5,6,7,8 };
//	int* parr[] = { arr1,arr2,arr3 };
//	int i = 0;
//	for (i = 0; i < 3; i++)
//	{
//		int j = 0;
//		printf("arr%d[]:", i + 1);
//		for (j = 0; j < 6; j++)
//		{
//			printf("%d ", *(parr[i] + j));
//		}
//		printf("\n");
//	}
//
//	return 0;
//}

//*************************************************************数组指针的应用场景*******************************************************************************
//
//void print1(int arr[3][5], int x, int y)
//{
//	int i = 0;
//	for (i = 0; i < x; i++)
//	{
//		int j = 0;
//		for (j = 0; j < y; j++)
//		{
//			printf("%d ", arr[i][j]);
//		}
//		printf("\n");
//	}
//}
//void print2(int(*p)[5], int x, int y)
//{
//	int i = 0;
//	for (i = 0; i < x; i++)
//	{
//		int j = 0;
//		for (j = 0; j < y; j++)
//		{
//			printf("%d ", *(p[i] + j));
//			//printf("%d ",*(*(p+i)+j));
//			//printf("%d ", (*(p + i))[j]);
//		}
//		printf("\n");
//	}
//}
//int main()
//{
//	int arr[3][5] = { {1,2,3,4,5},{2,3,4,5,6},{3,4,5,6,7} };
//	print1(arr, 3, 5);//普通打印二维数组方法
//	print2(arr, 3, 5);//通过数组指针实现打印二维数组方法;此处应将arr数组看成是一维数组arr，它有3个元素（分别为{1,2,3,4,5}，{2,3,4,5,6}，{3,4,5,6,7}）；
//	return 0;
//}
////*****一维数组在函数传参的时候，传过去的其实就是它的首元素的地址；二维数组在函数传参的时候，传过去的也是它的首元素的地址，但是它的首元素地址其实是它的第一行的地址，
////      而非第一个元素的地址(需要把二维数组看成是一维数组，它的每一行为一个‘元素’)


//**********************************************************字符指针**********************************************************

int main()
{
	char ch = 'w';
	char* p = &ch;
	const char* p2 = "abcdef";//p2指针只有4个字节大小不能完全存储字符串“abcdef”的地址，所以这里的P2存储的其实是字符串“abcdef”的首字母‘a’的
	printf("%s", p2);                      //地址；只要找到a的地址即可找到字符串的地址；注意：这里的字符串“abcdef”是常量字符串，是不允许被修改的！例如：
	                           //char* p2="abcdef"; 如果通过P2来修改a使不能被允许的！
	return 0;
}