//题目：字符串相乘
给定两个以字符串形式表示的非负整数 num1 和 num2，返回 num1 和 num2 的乘积，它们的乘积也表示为字符串形式。
class Solution {
public:

     string addStrings(string num1, string num2) {
       int end1=num1.size()-1,end2=num2.size()-1,next = 0;
       string addstr;
       while(end1>=0 || end2>=0)
       {
           if(end1>=0 && end2>=0)
           {
                if((num1[end1]-'0')+(num2[end2]-'0')+next>9)
                {
                  addstr+=(num1[end1]-'0')+(num2[end2]-'0')+next-10 +'0';
                  next=1;
                } 
                else
                {
                  addstr+=(num1[end1]-'0')+(num2[end2]-'0')+next+'0';
                  next=0;
                }
           }
           if(end1>=0 && end2<0)
           {
               if((num1[end1]-'0')+next>9)
                {
                  addstr+=(num1[end1]-'0')-10+next+'0';
                  next=1;
                } 
                else
                {
                  addstr+=(num1[end1]-'0')+next+'0';
                  next=0;
                }
           }
            if(end1<0 && end2>=0)
           {
               if((num2[end2]-'0')+next>9)
                {
                  addstr+=(num2[end2]-'0')-10+next+'0';
                  next=1;
                } 
                else
                {
                  addstr+=(num2[end2]-'0')+next+'0';
                  next=0;
                }
           }
           end1--;
           end2--;
       }
       if(next==1)
       addstr+='1';
       reverse(addstr.begin(),addstr.end());
       return addstr;
    }
    string multiply(string num1, string num2) {
        if(num1=="0" || num2=="0")  return "0";
       string mul;
       int next=0;
       int end1=num1.size()-1,end2=num2.size()-1;
       while(end1>=0)
       {
          string tmp;
          end2=num2.size()-1;
          next=0;
          while(end2>=0)
          {
              if((num1[end1]-'0')*(num2[end2]-'0')+next>9)
              {
                tmp+=((num1[end1]-'0')*(num2[end2]-'0')+next)%10+'0';
                next=((num1[end1]-'0')*(num2[end2]-'0')+next)/10;
              }
              else
              {
                tmp+=(num1[end1]-'0')*(num2[end2]-'0')+next+'0';
                next=0;
              }
              end2--;
          }
          if(next>0)
          {
              tmp+=next+'0';
          }
          reverse(tmp.begin(),tmp.end());
         
          for(int i=end1;i<num1.size()-1;i++)
          {
            tmp.push_back('0');
          }
          mul=addStrings(mul,tmp);
          end1--;
       }
       return mul;
    }
};
//题目： 找出字符串中第一个只出现一次的字符：
找出字符串中第一个只出现一次的字符
输入描述：
输入几个非空字符串
输出描述：
输出第一个只出现一次的字符，如果不存在输出-1
#include<iostream>
#include<string>
using namespace std;

int main()
{
        string s;
    while(getline(cin,s))
    {
       int i=0;
       int str[256]={0};
       for(i=0;i<s.size();++i)
       {
           str[s[i]]++;
       }
        for(i=0;i<s.size();i++)
        {
            if(str[s[i]]==1)
            {
                cout<<s[i]<<endl;
                break;
            }
        }
        if(i==s.size())
          printf("-1\n");
        
    }
    return 0;
}