#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
include<string.h>
void reverse_string(char* arr)   /////////////////////////////*******************递归实现字符串的逆序排列
{
	char tmp = arr[0];
	int len = my_strlen(arr);
	arr[0] = arr[len - 1];
	arr[len - 1] = '\0';
	if (my_strlen(arr + 1) >= 2)
	{
		reverse_string(arr + 1);
	}
	arr[len - 1] = tmp;
}

int main()
{
	 char arr[] = "abcdef";
	 reverse_string(arr);
	 printf("%s", arr);
	 return 0;
}



int Sum(int n)
{
	if (n > 9)
	{
		return Sum(n / 10) + n % 10;
	}
	return n;
}
int main()
{
	int n = 0;
	scanf("%d", &n);
	Sum(n);
	printf("%d\n", Sum(n));
	return 0;
}


double Minhanshu(int n, int k)
{
	if (k < 0)
	{
		return (1.0 / Minhanshu(n, -k));
	}
	else if (k == 0)
	{
		return 1;
	}
	else
	{
	   return  Minhanshu(n, k - 1) * n;
     }
}
int main()
{
	int n = 0;
	int k = 0;
	scanf("%d%d", &n,&k);
	double ret=Minhanshu(n, k);
	printf("ret=%lf\n", ret);
	return 0;
}


#include<stdio.h>;
void reverse(char* arr)                   //********************************逆序字符串********指针版本
{
	int len = strlen(arr);
	char* left = arr;
	char* right = arr + len - 1;
	while (left < right)
	{
		char tmp = *left;
		*left = *right;
		*right = tmp;
		left++;
		right--;
	}
}
int main()
{
	char arr[256] = { 0 };
	//scanf("%s", arr);
	gets_s(arr);//读取一行
	reverse(arr);
	printf("%s", arr);
	return 0;
}



int Sn_sum(int a)
{
	return a + 11 * a + 111 * a + 1111 * a + 11111 * a;
}
int main()
{
	int a = 0;
	scanf("%d", &a);
	int Sn = Sn_sum(a);
	printf("Sn=%d\n", Sn);
	return 0;
}
int main()
{
	int a = 0;
	int n = 0;
	scanf("%d%d", &a, &n);
	int sum = 0;
	int i = 0;
	int ret = 0;
	for (i = 0; i < n; i++)
	{
		ret = ret * 10 + a;
		sum += ret;
	}
	printf("%d\n", sum);
	return 0;
}



int  Minhanshu(int n, int k)
{
	if (k < 0)
	{
		return (1 / Minhanshu(n, -k));
	}
	else if (k == 0)
	{
		return 1;
	}
	else
	{
		return  Minhanshu(n, k - 1) * n;
	}
}
void Search_num()
{
	int n = 1;
	for(n=1;n<=100000;n++)
	{
		if (n <= 9)
		{
			printf("%d ", n);
		}
		else if (10 <= n && n<= 99)
		{
			if (n == Minhanshu(n%10,2) + Minhanshu(n/10,2))
				printf("%d ", n);
		}
		else if (n >= 100 && n <= 999)
		{
			if (n == Minhanshu(n % 10, 3) + Minhanshu((n / 10) % 10, 3) + Minhanshu((n / 100) % 10, 3))
				printf("%d ", n);
		}
		else if (n >= 1000 && n <= 9999)
		{
			if (n == Minhanshu(n % 10, 4) + Minhanshu((n / 10) % 10, 4) + Minhanshu((n / 100) % 10, 4) + Minhanshu((n / 1000) % 10, 4))
				printf("%d ", n);
		}
		else if (n >= 10000 && n <= 99999)
		{
			if (n == Minhanshu(n % 10, 5) + Minhanshu((n / 10) % 10, 5) + Minhanshu((n / 100) % 10, 5) + Minhanshu((n / 1000) % 10, 5) + Minhanshu((n / 10000) % 10, 5))
				printf("%d ", n);
		}
		else if (n == 100000)
		{
			if (n == Minhanshu(n % 10, 6) + Minhanshu((n / 10) % 10, 6) + Minhanshu((n / 100) % 10, 6) + Minhanshu((n / 1000) % 10, 6) + Minhanshu((n / 10000) % 10, 6) + Minhanshu((n / 100000) % 10, 6))
				printf("%d ", n);
		}
	}
}
int main()
{
	Search_num();
	return 0;
}
#include<math.h>
int main()                  //************************自幂数**********升级版
{
	//判断i是否为水仙花数（自幂数）；
	//1.计算i的位数-n位数
	int i = 0;
	for (i = 0; i <= 100000; i++)
	{
		int n = 1;
		int tmp = i;
		int sum = 0;
		while (tmp /= 10)
		{
			n++;
		}
		//2.计算i的每一位的n次方之和  sum
		//3.比较i==sum
		tmp = i;
		while (tmp)
		{
			sum += pow(tmp % 10, n);
			tmp /= 10;
		}
		if (i == sum)
		{
			printf("%d ", i);
		}
	}
}

int main()                     //                            **********************************打印菱形******************************************
{
	int line = 0;
	scanf("%d", &line);
	int i = 0;
	打印上半部分
	for (i = 0; i < line; i++)
	{
		打印空格
		int j = 0;
		for (j = 0; j < line - 1 - i; j++)
		{
			printf(" ");
		}
		打印*
		for (j = 0; j < 2 * i + 1; j++)
		{
			printf("*");
		}
		printf("\n");
	}
	打印下半部分
	for (i = 0; i < line - 1; i++)
	{
		int j = 0;
		打印空格
		for (j = 0; j <= i; j++)
		{
			printf(" ");
		}
		打印*
		for (j = 0; j < 2 * (line - 1 - i) - 1; j++)
		{
			printf("*");
		}
		printf("\n");
	}
	return 0;
}