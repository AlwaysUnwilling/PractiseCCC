//二叉搜索树与双向链表：输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的双向链表：注意:
1.要求不能创建任何新的结点，只能调整树中结点指针的指向。当转化完成以后，树中节点的左指针需要指向前驱，树中节点的右指针需要指向后继
2.返回链表中的第一个节点的指针
3.函数返回的TreeNode，有左右指针，其实可以看成一个双向链表的数据结构
/*
struct TreeNode {
	int val;
	struct TreeNode *left;
	struct TreeNode *right;
	TreeNode(int x) :
			val(x), left(NULL), right(NULL) {
	}
};*/
//方法一：利用队列
class Solution {
public:
    void TreeInsertQueue(TreeNode* root,queue<TreeNode*>& q){
        if(root==nullptr) return;
        TreeInsertQueue(root->left,q);
        q.push(root);
        TreeInsertQueue(root->right,q);
    }
    TreeNode* Convert(TreeNode* pRootOfTree) {
        queue<TreeNode*> q;
        TreeInsertQueue(pRootOfTree,q);
        if(q.empty())  return nullptr;
        TreeNode* head=q.front();
        q.pop();
        TreeNode* tail=head;
        while(!q.empty()){
            TreeNode* front=q.front();
            q.pop();
            tail->right=front;
            front->left=tail;
            tail=front;
        }
        return head;
    }
};
//方法二：不创建新节点
class Solution {
public:
    void ConvertList(TreeNode* cur,TreeNode*& prev)
    {
        if(cur==nullptr)  return;
        ConvertList(cur->left,prev);
        cur->left=prev;
        //cur在这里出现的顺序就是中序，也是有序的
        //当前结点cur的左指向前一个prev；
        //挡墙结点的右指向下一个结点；但是cur为当前结点时，它可以让它的左指向前一个，但是它不知道它的下一个结点，所以它的
        //右的指向在当前步骤里无法完成。但是我们把cur赋值给prev后，当递归到下一步，prev的右(即递归前的cur的右)可以处理了
        //此时prev的右的下一个是cur；
        if(prev)
            prev->right=cur;
        prev=cur;
        ConvertList(cur->right,prev);
    }
    TreeNode* Convert(TreeNode* pRootOfTree) 
    {
        TreeNode* prev=nullptr;
        ConvertList(pRootOfTree,prev);
        TreeNode* head=pRootOfTree;
        while(head && head->left)
        {
            head=head->left;
        }
        return head;
    }
};


//从前序与中序遍历序列构造二叉树：给定一棵树的前序遍历 preorder 与中序遍历  inorder。请构造二叉树并返回其根节点。
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* _buildTree(vector<int>& preorder, vector<int>& inorder,int& prei,int inbegin,int inend)
    {
        if(inbegin>inend)   //判断是否为空树
        return nullptr;
        TreeNode* root=new TreeNode(preorder[prei]);
        int rooti=inbegin;
        while(rooti<=inend)
        {
            if(inorder[rooti]==preorder[prei])
            break;
            else
            ++rooti;
        }
        //把中序划分为三段区间[inbegin,rooti-1] rooti [rooti+1,inend]
        //分别对应 当前根的左子树区间，当前根，当前根的右子树区间
        if(inbegin<=rooti-1)  //左子树区间存在
        root->left=_buildTree(preorder,inorder,++prei,inbegin,rooti-1);
        else
        root->left=nullptr;
        if(rooti+1<=inend)   //右子树区间存在
        root->right=_buildTree(preorder,inorder,++prei,rooti+1,inend);
        else
        root->right=nullptr;
        return root;
    }
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
      int prei=0,inbegin=0,inend=inorder.size()-1;
      return _buildTree(preorder,inorder,prei,inbegin,inend);
    }
};