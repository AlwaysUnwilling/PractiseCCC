//从前序与中序遍历序列构造二叉树:给定一棵树的前序遍历 preorder 与中序遍历  inorder。请构造二叉树并返回其根节点。
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* _buildTree(vector<int>& inorder,vector<int>& postorder,int& postorderi,int left,int right)
    {
        if(left>right)  return nullptr;
        TreeNode* root=new TreeNode(postorder[postorderi]);
        int rooti=right;
        for(rooti=right;rooti>=left;--rooti)
        {
            if(inorder[rooti]==postorder[postorderi])
            {
                break;
            }
        }
        //[left,rooti-1] rooti [rooti+1,right]
        if(rooti+1<=right)
        {
            root->right=_buildTree(inorder,postorder,--postorderi,rooti+1,right);
        }
        else
        {
            root->right=nullptr;
        }
        if(left<=rooti-1)
        {
            root->left=_buildTree(inorder,postorder,--postorderi,left,rooti-1);
        }
        else
        {
            root->left=nullptr;
        }
        return root;
    }
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
      int postorderi=postorder.size()-1;
      int left=0,right=inorder.size()-1;
      return _buildTree(inorder, postorder,postorderi,left,right);
    }
};